name: 🎸 School of Prompt CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  release:
    types: [published]

env:
  PYTHON_VERSION: "3.9"

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.12"]  # Test only oldest and newest supported versions
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 📦 Cache Dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt', '**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
          
    - name: 🔧 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov flake8
        
    - name: 🔍 Lint with Flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 school_of_prompt/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 school_of_prompt/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
    - name: 🧪 Run Tests with Coverage
      run: |
        pytest tests/ --cov=school_of_prompt --cov-report=xml --cov-report=term-missing -v
      env:
        OPENAI_API_KEY: "test_key_for_ci"
        
    - name: 📊 Upload Coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔧 Install Security Tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit
        
    - name: 🛡️ Run Bandit Security Scan
      run: |
        bandit -r school_of_prompt/ -f json -o bandit-report.json --severity-level medium
        # Only fail on MEDIUM and HIGH severity issues, allow LOW severity warnings
        if [ $? -ne 0 ]; then
          echo "⚠️ Bandit found MEDIUM/HIGH security issues:"
          cat bandit-report.json
          exit 1
        else
          echo "✅ No MEDIUM/HIGH security issues found (LOW severity warnings are acceptable)"
        fi
      continue-on-error: false
      
    - name: 📤 Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: bandit-report.json
        retention-days: 30

  build:
    name: 🏗️ Build Package
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔧 Install Build Tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: 🏗️ Build Package
      run: python -m build
      
    - name: 🔍 Check Package
      run: twine check dist/*
      
    - name: 📤 Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 7

