name: 🎸 School of Prompt CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  release:
    types: [published]

env:
  PYTHON_VERSION: "3.9"

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 📦 Cache Dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt', '**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
          
    - name: 🔧 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov flake8
        
    - name: 🔍 Lint with Flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 school_of_prompt/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 school_of_prompt/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
    - name: 🧪 Run Tests with Coverage
      run: |
        pytest tests/ --cov=school_of_prompt --cov-report=xml --cov-report=term-missing -v
      env:
        OPENAI_API_KEY: "test_key_for_ci"
        
    - name: 📊 Upload Coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔧 Install Security Tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: 🛡️ Run Bandit Security Scan
      run: |
        bandit -r school_of_prompt/ -f json -o bandit-report.json --severity-level medium
        # Only fail on MEDIUM and HIGH severity issues, allow LOW severity warnings
        if [ $? -ne 0 ]; then
          echo "⚠️ Bandit found MEDIUM/HIGH security issues:"
          cat bandit-report.json
          exit 1
        else
          echo "✅ No MEDIUM/HIGH security issues found (LOW severity warnings are acceptable)"
        fi
      continue-on-error: false
      
    - name: 🔐 Check Dependencies for Vulnerabilities
      run: |
        safety check --json --output safety-report.json 2>/dev/null
        # If safety finds issues, show them but don't fail the build for now
        if [ $? -ne 0 ]; then
          echo "⚠️ Safety found vulnerability issues:"
          cat safety-report.json
          exit 1
        fi
      continue-on-error: false
      
    - name: 📤 Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  build:
    name: 🏗️ Build Package
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔧 Install Build Tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: 🏗️ Build Package
      run: python -m build
      
    - name: 🔍 Check Package
      run: twine check dist/*
      
    - name: 📤 Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 7

  test-install:
    name: 📦 Test Installation
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 📥 Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
        
    - name: 📦 Test Package Installation
      run: |
        pip install dist/*.whl
        python -c "import school_of_prompt; print(f'✅ School of Prompt v{school_of_prompt.__version__} installed successfully!')"

  publish-test-pypi:
    name: 🧪 Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: [test, security, build, test-install]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    environment: test-pypi
    
    steps:
    - name: 📥 Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
        
    - name: 🚀 Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true

  publish-pypi:
    name: 🚀 Publish to PyPI
    runs-on: ubuntu-latest
    needs: [test, security, build, test-install]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production-pypi
    
    steps:
    - name: 📥 Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
        
    - name: 🚀 Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  update-release-notes:
    name: 📝 Update Release Notes
    runs-on: ubuntu-latest
    needs: publish-pypi
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 📝 Generate Release Notes
      id: release_notes
      run: |
        # Get the current release tag
        CURRENT_TAG="${{ github.event.release.tag_name }}"
        
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 "$CURRENT_TAG^" 2>/dev/null || echo "")
        
        echo "Current tag: $CURRENT_TAG"
        echo "Previous tag: $PREVIOUS_TAG"
        
        # Generate changelog
        echo "## 🎸 What's New in $CURRENT_TAG" > release_notes.md
        echo "" >> release_notes.md
        
        # Get commits since last tag
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "### 📋 Changes:" >> release_notes.md
          git log "$PREVIOUS_TAG..$CURRENT_TAG" --pretty=format:"- %s" --reverse >> release_notes.md
        else
          echo "- Initial release" >> release_notes.md
        fi
        
        # Add PyPI links
        echo "" >> release_notes.md
        echo "## 📦 Installation" >> release_notes.md
        echo "" >> release_notes.md
        echo "\`\`\`bash" >> release_notes.md
        echo "pip install school-of-prompt==${CURRENT_TAG#v}" >> release_notes.md
        echo "\`\`\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "**PyPI Package**: https://pypi.org/project/school-of-prompt/${CURRENT_TAG#v}/" >> release_notes.md
        
    - name: 📤 Update GitHub Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release edit "${{ github.event.release.tag_name }}" \
          --notes-file release_notes.md

  notify:
    name: 📢 Notify Success
    runs-on: ubuntu-latest
    needs: [publish-pypi, update-release-notes]
    if: always() && github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: 🎉 Notify Release Success
      run: |
        echo "🎸 School of Prompt ${{ github.event.release.tag_name }} has been successfully released!"
        echo "📦 PyPI: https://pypi.org/project/school-of-prompt/${{ github.event.release.tag_name }}/"
        echo "🏷️ GitHub: ${{ github.event.release.html_url }}"