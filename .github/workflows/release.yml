name: 🏷️ Create Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      pre_release:
        description: 'Create a pre-release'
        required: false
        default: false
        type: boolean

jobs:
  create-release:
    name: 🚀 Create Release
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.9"
        
    - name: ⚙️ Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
    - name: 📊 Get Current Version
      id: current_version
      run: |
        CURRENT_VERSION=$(python -c "import school_of_prompt; print(school_of_prompt.__version__)")
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"
        
    - name: 🔢 Calculate New Version
      id: new_version
      run: |
        CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"
        VERSION_TYPE="${{ github.event.inputs.version_type }}"
        
        # Parse current version
        IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
        
        # Calculate new version based on type
        case $VERSION_TYPE in
          "major")
            NEW_VERSION="$((major + 1)).0.0"
            ;;
          "minor")
            NEW_VERSION="$major.$((minor + 1)).0"
            ;;
          "patch")
            NEW_VERSION="$major.$minor.$((patch + 1))"
            ;;
          *)
            echo "Invalid version type: $VERSION_TYPE"
            exit 1
            ;;
        esac
        
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"
        
    - name: 🔄 Update Version Files
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
        
        # Update __init__.py
        sed -i "s/__version__ = \".*\"/__version__ = \"$NEW_VERSION\"/" school_of_prompt/__init__.py
        
        # Update setup.py
        sed -i "s/version=\".*\"/version=\"$NEW_VERSION\"/" setup.py
        
        # Verify changes
        echo "Updated __init__.py:"
        grep "__version__" school_of_prompt/__init__.py
        echo "Updated setup.py:"
        grep "version=" setup.py
        
    - name: 📝 Generate Release Notes
      id: release_notes
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
        
        # Get the latest tag (before our new one)
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        # Create release notes
        cat > release_notes.md << EOF
        ## 🎸 What's New in v$NEW_VERSION
        
        EOF
        
        # Add commits since last tag
        if [ -n "$LATEST_TAG" ]; then
          echo "### 📋 Changes:" >> release_notes.md
          git log "$LATEST_TAG..HEAD" --pretty=format:"- %s" --reverse >> release_notes.md
        else
          echo "- Initial release of School of Prompt" >> release_notes.md
        fi
        
        cat >> release_notes.md << EOF
        
        ## 📦 Installation
        
        \`\`\`bash
        pip install school-of-prompt==$NEW_VERSION
        \`\`\`
        
        ## 🔗 Links
        
        - **PyPI Package**: https://pypi.org/project/school-of-prompt/$NEW_VERSION/
        - **Documentation**: https://github.com/gpereyra/school-of-prompt#readme
        - **Examples**: https://github.com/gpereyra/school-of-prompt/tree/main/examples
        
        ---
        
        🎸 **Rock your prompts with School of Prompt!** 🤘
        EOF
        
        # Set multiline output safely
        {
          echo 'release_notes<<EOF'
          cat release_notes.md
          echo 'EOF'
        } >> $GITHUB_OUTPUT
        
    - name: 🏷️ Create Git Tag and Commit
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
        
        # Add and commit version changes
        git add school_of_prompt/__init__.py setup.py
        git commit -m "🔖 Bump version to v$NEW_VERSION

        🎸 Generated with [Claude Code](https://claude.ai/code)

        Co-Authored-By: Claude <noreply@anthropic.com>"
        
        # Create annotated tag
        git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
        
    - name: 📤 Push Changes
      run: |
        git push origin master
        git push origin --tags
        
    - name: 🚀 Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
        PRERELEASE_FLAG=""
        
        if [ "${{ github.event.inputs.pre_release }}" = "true" ]; then
          PRERELEASE_FLAG="--prerelease"
        fi
        
        gh release create "v$NEW_VERSION" \
          --title "🎸 School of Prompt v$NEW_VERSION" \
          --notes-file release_notes.md \
          $PRERELEASE_FLAG

  notify:
    name: 📢 Notify Release Created  
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: 🎉 Release Notification
      run: |
        echo "🎸 School of Prompt release workflow completed!"
        echo "🏷️ New tag: v${{ needs.create-release.outputs.new_version }}"
        echo "📦 The CI/CD pipeline will now build and publish to PyPI automatically."